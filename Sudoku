class SudokuSolver:
    def __init__(self, grid):
        self.grid = grid

    def solve(self):
        empty_cell = self.find_empty_cell()
        if not empty_cell:
            return True  # Sudoku résolu avec succès
        else:
            row, col = empty_cell

        for num in range(1, 10):
            if self.is_valid(num, (row, col)):
                self.grid[row][col] = num

                if self.solve():
                    return True

                self.grid[row][col] = 0  # Backtrack si la solution n'est pas valide

        return False  # Retourne False si aucune solution n'est trouvée

    def find_empty_cell(self):
        for row in range(9):
            for col in range(9):
                if self.grid[row][col] == 0:
                    return (row, col)
        return None

    def is_valid(self, num, pos):
        # Vérifie si le numéro est valide dans la position donnée
        row, col = pos

        # Vérification de la ligne
        if num in self.grid[row]:
            return False

        # Vérification de la colonne
        if num in [self.grid[i][col] for i in range(9)]:
            return False

        # Vérification de la sous-grille 3x3
        start_row, start_col = 3 * (row // 3), 3 * (col // 3)
        for i in range(start_row, start_row + 3):
            for j in range(start_col, start_col + 3):
                if self.grid[i][j] == num:
                    return False

        return True

    def print_grid(self):
        for i in range(9):
            if i % 3 == 0 and i != 0:
                print("- - - - - - - - - - - -")

            for j in range(9):
                if j % 3 == 0 and j != 0:
                    print(" | ", end="")

                if j == 8:
                    print(self.grid[i][j])
                else:
                    print(str(self.grid[i][j]) + " ", end="")


# Exemple d'utilisation
if __name__ == "__main__":
    # Création d'une instance de SudokuSolver avec la grille de Sudoku donnée
    grid1 = [
        [0, 7, 2, 9, 0, 0, 0, 0, 3],
        [0, 0, 1, 0, 0, 0, 6, 0, 8],
        [0, 0, 0, 0, 4, 0, 0, 6, 0],
        [9, 6, 0, 0, 0, 4, 1, 0, 8],
        [0, 4, 8, 7, 0, 5, 0, 9, 6],
        [0, 0, 5, 6, 0, 8, 0, 0, 3],
        [0, 0, 0, 0, 4, 0, 2, 0, 1],
        [8, 5, 0, 0, 6, 3, 2, 7, 0],
        [1, 0, 0, 8, 5, 0, 0, 0, 0]
    ]
    solver = SudokuSolver(grid1)
    solver.solve()  # Résoudre le Sudoku
    solver.print_grid()  # Afficher la solution

print("_____________________________")
print ("example2")
if __name__ == "__main__":
    # Création d'une instance de SudokuSolver avec la grille de Sudoku donnée
    grid2 = [
    [7, 0, 0, 9, 2, 0, 4, 0, 0],
    [0, 0, 0, 0, 0, 0, 7, 0, 0],
    [0, 0, 4, 0, 0, 8, 3, 1, 2],
    [4, 0, 0, 0, 0, 2, 5, 0, 0],
    [2, 0, 0, 0, 1, 0, 0, 0, 3],
    [0, 0, 8, 5, 0, 0, 0, 0, 4],
    [8, 4, 3, 2, 0, 0, 6, 0, 0],
    [0, 0, 5, 0, 0, 0, 0, 0, 0],
    [0, 2, 0, 6, 4, 0, 0, 5, 0]
]

    solver = SudokuSolver(grid2)
    solver.solve()  # Résoudre le Sudoku
    solver.print_grid()  # Afficher la solution

print("_____________________________")
print ("example3")
if __name__ == "__main__":
    # Création d'une instance de SudokuSolver avec la grille de Sudoku donnée
    grid3 = [
    [0, 0, 9, 0, 8, 5, 0, 6, 3],
    [0, 7, 0, 9, 6, 0, 0, 0, 0],
    [5, 0, 1, 0, 0, 4, 0, 0, 0],
    [0, 0, 6, 7, 0, 3, 0, 0, 4],
    [0, 4, 0, 2, 1, 0, 3, 9, 0],
    [8, 0, 0, 0, 9, 0, 0, 5, 7],
    [9, 8, 4, 5, 0, 0, 6, 0, 0],
    [0, 0, 7, 6, 4, 9, 0, 3, 0],
    [6, 1, 0, 0, 2, 0, 0, 4, 0]
]


    solver = SudokuSolver(grid3)
    solver.solve()  # Résoudre le Sudoku
    solver.print_grid()  # Afficher la solution

print("_____________________________")
print ("example4")
if __name__ == "__main__":
    # Création d'une instance de SudokuSolver avec la grille de Sudoku donnée
    grid4 = [
    [3, 0, 0, 0, 0, 0, 0, 8, 0],
    [1, 0, 0, 6, 0, 3, 0, 0, 2],
    [5, 6, 0, 0, 0, 0, 0, 0, 0],
    [0, 8, 0, 1, 0, 0, 9, 7, 0],
    [0, 0, 0, 5, 0, 0, 0, 0, 0],
    [2, 0, 9, 0, 0, 4, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 6, 2, 0],
    [0, 0, 0, 0, 0, 0, 4, 3, 0],
    [0, 7, 0, 0, 5, 0, 1, 0, 0]
]


    solver = SudokuSolver(grid4)
    solver.solve()  # Résoudre le Sudoku
    solver.print_grid()  # Afficher la solution

print("_____________________________")
print ("example5")
if __name__ == "__main__":
    # Création d'une instance de SudokuSolver avec la grille de Sudoku donnée
    grid5 = [
    [0, 0, 9, 0, 6, 0, 0, 0, 0],
    [0, 0, 0, 3, 0, 0, 0, 1, 0],
    [0, 4, 5, 0, 1, 0, 0, 0, 6],
    [0, 0, 0, 0, 0, 8, 2, 0, 0],
    [0, 6, 1, 0, 3, 0, 0, 0, 5],
    [7, 0, 0, 0, 0, 0, 0, 0, 0],
    [9, 0, 0, 0, 4, 0, 0, 0, 0],
    [0, 7, 4, 2, 0, 0, 5, 0, 0],
    [3, 0, 0, 0, 0, 0, 0, 0, 7]
]



    solver = SudokuSolver(grid5)
    solver.solve()  # Résoudre le Sudoku
    solver.print_grid()  # Afficher la solution
